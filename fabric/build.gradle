plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}

base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}

version = "${version}${buildnumber}"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")
	
    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_port}"
	modApi "mysticdrew:common-networking-fabric:${common_networking}-${minecraft_version}"
    include "mysticdrew:common-networking-fabric:${common_networking}-${minecraft_version}"
    modImplementation "com.blamejared.controlling:Controlling-fabric-${minecraft_version}:${controlling}"
    modImplementation "com.blamejared.searchables:Searchables-fabric-${minecraft_version}:${searchables}"
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}