plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}

version = "${version}${buildnumber}"

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

jarJar.enable()
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")

    compileOnly fg.deobf("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_port}")
	implementation fg.deobf("mysticdrew:common-networking-forge:${common_networking}-${minecraft_version}")	
    jarJar group: 'mysticdrew', name: 'common-networking-neoforge', version: '[1.0.1, 5.0.0)'
}

reobf {
    jarJar {}
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')