plugins {
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.41'
    id 'java-library'
}

base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}

version = "${version}${buildnumber}"

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jarJar.enable()
dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")

	implementation "mysticdrew:common-networking-neoforge:${common_networking}-${minecraft_version}"		
    jarJar group: 'mysticdrew', name: 'common-networking-neoforge', version: '[1.0.1, 5.0.0)'
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

tasks.named("build").configure {
    dependsOn("jarJar")
}